{"version":3,"sources":["../src/functions/helpers.js","../src/_const.js","../src/core/drawer.js","../src/functions/vectors.js","../src/core/particle.js","../src/core/keyboard-event-binder.js","../src/core/basic-object.js","../src/objects/enemy.js","../src/objects/floating-dot.js","../src/core/objects-register.js","../src/core/registers-owner.js","../src/objects/bullet.js","../src/objects/player.js","../src/core/owner.js","../src/index.js"],"names":["getRndInteger","min","max","Math","floor","random","getRandomTrueFalse","chance","hexToRgbCode","c","hex","substring","split","length","join","COLOR_SCHEME","Object","freeze","getRandomColorCode","GRAVITY_VECTOR","TILESIZE","CIRCLE_LENGTH","PI","TIMESTAMP_CORRECTION","OBJECTS_TYPES","Drawer","element","context","getContext","save","fillStyle","fillRect","width","height","restore","pos","size","color","x","y","beginPath","arc","fill","start","end","moveTo","lineTo","stroke","text","textAlign","textBaseline","font","fillText","tileset","drawImage","fixCalc","number","Number","toFixed","summVectors","a","b","substractVectors","multipleVectorByCoef","coef","decriceVectorByCoef","fixPointsToOneSystem","getAngleByTwoPoints","_a","_b","getVectorLength","sqrt","pow","Particle","lifetime","parrent","vector","fillCode","lifestamp","borntime","Date","getTime","deathtime","_drawer","drawMeCircle","time","deleteObject","KeyboardEventBinder","listeners","pushedKey","Set","addEventListener","keyCodeArray","listener","forEach","item","add","event","preventDefault","type","has","keyCode","delete","BasicObject","Enemy","deathPoint","timestamp","ENEMY","FloatingDot","deathTime","initialSize","floatOffset","mousePos","_correctTimestamp","cos","sin","ObjectRegister","register","object","push","filter","tick","drawer","draw","RegistersOwner","registersMap","flag","remove","get","key","update","keys","Bullet","deleteSelf","BULLET","DEFAULT_DODGE_STATE","DODGE_DURATION","Player","movingDir","dodgeState","assign","init","keyboardEventBinder","keyboardHandler","bind","createObject","activateDodge","active","startPos","startTimestamp","updateDodge","Owner","objectsRegister","lastFrameTime","score","player","ongoing","enemyArray","bulletArray","bullet","enemy","spamParticles","clear","createEnemy","checkPlayerCollissions","checkBulletCollisions","floatDot","PARTICLE","ceil","amount","i","particle","cnv","document","querySelector","window","innerHeight"],"mappings":"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","file":"src.7840f3fd.map","sourceRoot":"../public","sourcesContent":["export const getRndInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nexport const getRandomTrueFalse = chance => {\n  return getRndInteger(0, chance) === chance - 1;\n};\n\nexport const hexToRgbCode = hex => {\n  let c = hex.substring(1).split(\"\");\n  if (c.length == 3) {\n    c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n  }\n  c = \"0x\" + c.join(\"\");\n  return [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(\",\");\n};\n\nexport const COLOR_SCHEME = Object.freeze([\n  \"#FFFF00\",\n  \"#2AD689\",\n  \"#F3FF3F\",\n  \"#0D5C63\",\n  \"#247B7B\",\n  \"#44A1A0\"\n]);\n\nexport const getRandomColorCode = () => {\n  return COLOR_SCHEME[getRndInteger(0, COLOR_SCHEME.length)];\n};\n","export const GRAVITY_VECTOR = {\n  x: 0,\n  y: 0.25\n};\n\nexport const TILESIZE = 48;\n\nexport const CIRCLE_LENGTH = 2 * Math.PI;\n\nexport const TIMESTAMP_CORRECTION = 900;\n\nexport const OBJECTS_TYPES = Object.freeze({\n  ENEMY: 'ENEMY',\n  BULLET: 'BULLET',\n  PARTICLE: 'PARTICLE',\n});","import { CIRCLE_LENGTH } from \"../_const.js\";\nimport { hexToRgbCode } from \"../functions/helpers.js\";\n\nexport class Drawer {\n  constructor(element) {\n    this.element = element;\n    this.context = element.getContext(\"2d\");\n  }\n\n  clear() {\n    this.context.save();\n    this.context.fillStyle = `rgba(${hexToRgbCode('#333')}, .5)`;\n    this.context.fillRect(0, 0, this.element.width, this.element.height);\n    this.context.restore();\n  }\n\n  drawMe(pos, size, color) {\n    this.context.save();\n    this.context.fillStyle = color;\n    this.context.fillRect(pos.x - size / 2, pos.y - size / 2, size, size);\n    this.context.restore();\n  }\n\n  drawMeCircle(pos, size, color) {\n    if (size < 0) return;\n    this.context.fillStyle = color;\n    this.context.beginPath();\n    this.context.arc(pos.x, pos.y, size, 0, CIRCLE_LENGTH);\n    this.context.fill();\n  }\n\n  line(start, end, size, color) {\n    if (size < 0) return;\n    this.context.beginPath();\n    this.context.moveTo(start.x, start.y);\n    this.context.lineTo(end.x, end.y);\n    this.context.stroke();\n  }\n\n  fillText(pos, text, color, size) { \n    this.context.save();\n    this.context.textAlign = \"center\";\n    this.context.textBaseline = \"middle\";\n    this.context.fillStyle = color;\n    this.context.font = `${size}px Helvetica`;\n    this.context.fillText(text, pos.x, pos.y)\n    this.context.restore();\n  }\n\n  fillTile(pos, tileset) {\n    this.context.drawImage(tileset, pos.x, pos.y);\n  }\n}\n","const fixCalc = (number) => {\n  return +Number(number).toFixed(2);\n}\n\nexport const summVectors = (a, b, c = { x: 0, y: 0 }) => {\n  return {\n    x: fixCalc(a.x + b.x + c.x),\n    y: fixCalc(a.y + b.y + c.y)\n  };\n};\n\nexport const substractVectors = (a, b) => {\n  return {\n    x: fixCalc(a.x - b.x),\n    y: fixCalc(a.y - b.y)\n  };\n};\n\nexport const multipleVectorByCoef = (a, coef) => {\n  return {\n    x: fixCalc(a.x * coef),\n    y: fixCalc(a.y * coef)\n  }\n}\n\nexport const decriceVectorByCoef = (a, coef) => {\n  return {\n    x: fixCalc(a.x / coef),\n    y: fixCalc(a.y / coef)\n  };\n};\n\nexport const fixPointsToOneSystem = (a, b) => {\n  return {\n    a: { x: 0, y: 0 },\n    b: substractVectors(b, a)\n  };\n};\n\nexport const getAngleByTwoPoints = (_a, _b) => {\n  const { a, b } = fixPointsToOneSystem(_a, _b);\n\n  debugger;\n};\n\nexport const getVectorLength = (a, b) => {\n  return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n};\n","import { GRAVITY_VECTOR } from \"../_const.js\";\nimport { getRandomColorCode, hexToRgbCode } from \"../functions/helpers.js\";\nimport { summVectors } from \"../functions/vectors.js\";\n\nexport class Particle {\n  constructor({ pos, lifetime, parrent, vector, size, color }) {\n    this.pos = pos;\n    this.vector = vector || {\n      x: Math.random() * 4 - 2,\n      y: Math.random() * 4 - 2\n    };\n    this.size = size || 5;\n    this.color = hexToRgbCode(color || getRandomColorCode());\n    this.fillCode = \"\";\n    this.lifestamp = 0;\n    this.lifetime = lifetime;\n    this.borntime = new Date().getTime();\n    this.deathtime = this.borntime + lifetime;\n    this.parrent = parrent;\n  }\n\n  draw(_drawer) {\n    _drawer.drawMeCircle(\n      this.pos,\n      this.size * (1 - this.lifestamp),\n      this.fillCode\n    );\n  }\n\n  tick(time) {\n    this.lifestamp = (time - this.borntime) / this.lifetime;\n\n    if (this.pos.y > this.parrent.element.height) {\n      this.vector.y = -1 * this.vector.y / 2;\n    }\n\n    this.vector = summVectors(this.vector, GRAVITY_VECTOR);\n    this.pos = summVectors(this.pos, this.vector);\n    this.fillCode = `rgba(${this.color}, ${1 - this.lifestamp})`;\n\n    if (this.lifestamp > 1) {\n      this.parrent.deleteObject(this);\n    }\n  }\n}\n","export class KeyboardEventBinder {\n  constructor() {\n    this.listeners = {};\n    this.pushedKey = new Set();\n\n    window.addEventListener(\"keydown\", this);\n    window.addEventListener(\"keyup\", this);\n  }\n\n  register(keyCodeArray, listener) {\n    keyCodeArray.forEach(item => {\n      if (!this.listeners[item]) {\n        this.listeners[item] = new Set();\n      }\n      this.listeners[item].add(listener);\n    });\n  }\n\n  handleEvent(event) {\n    event.preventDefault();\n    if (event.type === \"keydown\") {\n      if (this.pushedKey.has(event.keyCode)) return;\n      this.pushedKey.add(event.keyCode);\n    } else if (event.type === \"keyup\") {\n      this.pushedKey.delete(event.keyCode);\n    }\n\n    if (this.listeners[event.keyCode]) {\n      this.listeners[event.keyCode].forEach(item => {\n        item(event);\n      });\n    }\n  }\n}\n","export class BasicObject {\n  constructor({ pos, color, size, parrent }) {\n    this.pos = pos;\n    this.parrent = parrent;\n    this.color = color;\n    this.size = size;\n  }\n\n  tick() {\n    return null;\n  }\n\n  draw(_drawer) {\n    _drawer.drawMeCircle(this.pos, this.size, this.color);\n  }\n\n  deleteSelf() {\n    return null;\n  }\n}\n","import { BasicObject } from \"../core/basic-object\";\nimport { summVectors } from \"../functions/vectors\";\nimport { getRandomColorCode, getRndInteger } from \"../functions/helpers\";\nimport { OBJECTS_TYPES } from \"../_const\";\n\nexport class Enemy extends BasicObject {\n    constructor({pos, size, parrent, deathPoint}) {\n        super({pos, size, color: getRandomColorCode()});\n        this.parrent = parrent;\n        this.deathPoint = deathPoint;\n        this.vector = {x: 0, y: getRndInteger(10, 30) / 10};\n    }\n\n    tick(timestamp) {\n        this.pos = summVectors(this.pos, this.vector);\n        this.vector = summVectors(this.vector, {x: 0, y: .05});\n\n        if (this.pos.y > this.deathPoint) {\n            this.parrent.deleteObject(OBJECTS_TYPES.ENEMY, this);\n        }\n    }    \n}","import { getRandomColorCode } from \"../functions/helpers\";\nimport { TIMESTAMP_CORRECTION, GRAVITY_VECTOR } from \"../_const\";\nimport { summVectors } from \"../functions/vectors\";\n\nexport class FloatingDot {\n    constructor({ pos, parrent }) {\n      this.pos = pos;\n      this.vector = { x: 0, y: 0 };\n      this.color = getRandomColorCode();\n      this.deathTime = new Date().getTime() + 5000;\n      this.parrent = parrent || null;\n      this.size = 0;\n      this.initialSize = this.size;\n      this.floatOffset = Math.random() * 50 * 100;\n      this.mousePos = null;\n    }\n  \n    tick(timestamp) {\n      this.size += 1;\n      const _correctTimestamp =\n        (timestamp + this.floatOffset) / TIMESTAMP_CORRECTION;\n      this.vector = summVectors(\n        {\n          x: Math.cos(_correctTimestamp) / 4,\n          y: Math.sin(_correctTimestamp) / 4\n        },\n        GRAVITY_VECTOR\n      );\n      this.pos = summVectors(this.pos, this.vector);\n\n      if (this.deathTime < timestamp) {\n        this.parrent.deleteObject(this);\n      }\n    }\n  \n    draw(_drawer) {\n      _drawer.drawMeCircle(this.pos, this.size, this.color);\n    }\n  }","export class ObjectRegister {\n    constructor() {\n        this.register = [];\n    }\n\n    add(object) {\n        this.register.push(object);\n    }\n\n    remove(object) {\n        this.register = this.register.filter(item => item !== object);\n    }\n\n    get() {\n        return this.register;\n    }\n\n    update(timestamp) {\n        this.register.forEach(item => {\n            if (!!item.tick) item.tick(timestamp);\n        })\n    }\n\n    draw(drawer) {\n        this.register.forEach(item => {\n            if (!!item.draw) item.draw(drawer);\n        })\n    }\n\n}","import { ObjectRegister } from \"./objects-register\";\n\nexport class RegistersOwner {\n    constructor() {\n        this.registersMap = {};\n    }\n\n    add(flag, object) {\n        if (!this.registersMap[flag]) {\n            this.registersMap[flag] = new ObjectRegister();\n        }\n\n        this.registersMap[flag].add(object);\n    }\n\n    remove(flag, object) {\n        if (!this.registersMap[flag]) return;\n        this.registersMap[flag].remove(object);\n    }\n\n    get(flag) {\n        if (!this.registersMap[flag]) return null;\n        return this.registersMap[flag].get();\n    }\n\n    update(timestamp) {\n        for (let key in this.registersMap) {\n            this.registersMap[key].update(timestamp);\n        }\n    }\n\n    draw(drawer) {\n        Object.keys(this.registersMap)\n            .forEach(key => {\n                this.registersMap[key].draw(drawer);\n            });\n    }\n}","import { BasicObject } from \"../core/basic-object\";\nimport { summVectors } from \"../functions/vectors\";\nimport { OBJECTS_TYPES } from \"../_const\";\n\nexport class Bullet extends BasicObject {\n    constructor({ pos, parrent }) {\n        super({pos, color: '#fff', size: 2, parrent});\n        this.vector = {\n            x: 0, \n            y: -2\n        };\n    }\n\n    tick(timestamp) {\n        this.pos = summVectors(this.pos, this.vector);\n        this.vector = summVectors(this.vector, {x: 0, y: -.2});\n\n        if (this.pos.y < 0) {\n            this.deleteSelf();\n        }\n    }\n\n    deleteSelf() {\n        this.parrent.deleteObject(OBJECTS_TYPES.BULLET, this);\n    }\n}","import { BasicObject } from \"../core/basic-object.js\";\nimport { summVectors, decriceVectorByCoef } from \"../functions/vectors.js\";\nimport { Bullet } from \"./bullet.js\";\nimport { OBJECTS_TYPES } from \"../_const.js\";\n\nexport const DEFAULT_DODGE_STATE = Object.freeze({\n    active: false,\n    startTimestamp: null,\n    startPos: null,\n    vector: {x: 0, y: 0}\n});\nexport const DODGE_DURATION = 1000;\n\nexport class Player extends BasicObject {\n    constructor({ pos, color, parrent }) {\n      super({ pos, color, size: 10 });\n      this.movingDir = 0;\n      this.vector = { x: 0, y: 0 };\n      this.floor = pos.y + 40;\n      this.dodgeState = Object.assign({}, DEFAULT_DODGE_STATE);\n      this.parrent = parrent;\n\n      this.init();\n    }\n\n    init() {\n      this.parrent.keyboardEventBinder.register(\n        [65, 68, 32, 16],\n        this.keyboardHandler.bind(this)\n      );\n    }\n  \n    keyboardHandler(event) {\n      if (event.type === \"keydown\") {\n        switch (event.keyCode) {\n          case 65: {\n            this.movingDir -= 1;\n            break;\n          }\n          case 68: {\n            this.movingDir += 1;\n            break;\n          }\n          case 32: {\n            this.parrent.createObject(\n              OBJECTS_TYPES.BULLET,\n              new Bullet({\n                pos: Object.assign({}, this.pos),\n                parrent: this.parrent\n              })\n            )\n            break;\n          }\n          case 16: {\n            this.activateDodge();\n          }\n        }\n      } else if (event.type === \"keyup\") {\n        switch (event.keyCode) {\n          case 65: {\n            this.movingDir += 1;\n            break;\n          }\n          case 68: {\n            this.movingDir -= 1;\n            break;\n          }\n        }\n      }\n    }\n  \n    activateDodge() {\n       if (!this.dodgeState.active) {\n         this.dodgeState.startPos = Object.assign({}, this.pos);\n         this.dodgeState.active = true;\n         this.dodgeState.startTimestamp = new Date().getTime();\n         this.dodgeState.vector = {\n          x: 16 * this.movingDir,\n          y: 0 \n         };\n       }\n    }\n  \n    updateDodge(timestamp) {\n        if (this.dodgeState.active) {\n            this.dodgeState.vector = decriceVectorByCoef(this.dodgeState.vector, 1.2);\n            if (this.dodgeState.startTimestamp + DODGE_DURATION < timestamp) {\n              this.dodgeState = Object.assign({}, DEFAULT_DODGE_STATE);\n            }\n        }\n    }\n\n    draw(_drawer) {\n      _drawer.drawMeCircle(this.pos, this.size, this.color);\n    }\n  \n    tick(timestamp) {\n      this.updateDodge(timestamp);\n\n      this.pos = summVectors(summVectors(this.pos, this.vector), this.dodgeState.vector);\n      \n      if (this.pos.x > this.parrent.element.width) {\n        this.pos.x = 0;\n      } else if (this.pos.x < 0) {\n        this.pos.x = this.parrent.element.width;\n      }\n  \n      if (this.movingDir === 1 && this.vector.x < 4) {\n        this.vector = summVectors(this.vector, { x: 0.1, y: 0 });\n      } else if (this.movingDir === -1 && this.vector.x > -4) {\n        this.vector = summVectors(this.vector, { x: -0.1, y: 0 });\n      } else if (this.movingDir === 0) {\n        if (this.vector.x > 0) {\n          this.vector = summVectors(this.vector, { x: -0.1, y: 0 });\n        } else if (this.vector.x < 0) {\n          this.vector = summVectors(this.vector, { x: 0.1, y: 0 });\n        }\n      }\n    }\n  }","import { Drawer } from \"./drawer\";\nimport { Particle } from \"./particle\";\nimport { KeyboardEventBinder } from \"./keyboard-event-binder.js\";\nimport { getRandomTrueFalse, getRndInteger, getRandomColorCode } from \"../functions/helpers\";\nimport { Enemy } from \"../objects/enemy\";\nimport { getVectorLength } from \"../functions/vectors\";\nimport { FloatingDot } from \"../objects/floating-dot\";\nimport { RegistersOwner } from \"./registers-owner\";\nimport { OBJECTS_TYPES } from \"../_const\";\nimport { Player } from \"../objects/player\";\n\nexport class Owner {\n  constructor(element) {\n    this.element = element;\n    this.objectsRegister = new RegistersOwner();\n    this.drawer = new Drawer(this.element);\n    this.lastFrameTime = new Date().getTime();\n    this.keyboardEventBinder = new KeyboardEventBinder();\n    this.score = 0;\n    this.player = new Player({\n      pos: {\n        x: this.element.width / 2,\n        y: this.element.height - 40\n      },\n      color: getRandomColorCode(),\n      parrent: this\n    });\n\n    this.ongoing = true;\n\n    this.init();\n  }\n\n  init() {\n    this.tick();\n  }\n\n  checkPlayerCollissions() {\n    const enemyArray = this.objectsRegister.get(OBJECTS_TYPES.ENEMY);\n    if (!enemyArray) return;\n    \n    enemyArray.forEach(item => {\n      const length = getVectorLength(this.player.pos, item.pos);\n      const size = this.player.size + item.size;\n      if (length < size) {\n        this.ongoing = false;\n      }\n    })\n  }\n\n  checkBulletCollisions() {\n    const enemyArray = this.objectsRegister.get(OBJECTS_TYPES.ENEMY);\n    const bulletArray = this.objectsRegister.get(OBJECTS_TYPES.BULLET);\n\n    if (enemyArray === null || bulletArray === null) return;\n\n    bulletArray.forEach(bullet => {\n      enemyArray.forEach(enemy => {\n        const length = getVectorLength(bullet.pos, enemy.pos);\n        const size = bullet.size + enemy.size;\n        if (length < size) {\n          bullet.deleteSelf();\n          enemy.deleteSelf();\n\n          this.score += 1;\n          this.spamParticles(bullet.pos, 4);\n        }\n      })\n    })\n  }\n\n  deleteObject(flag, object) {\n    this.objectsRegister.remove(flag, object);\n  }\n\n  createObject(flag, object) {\n    this.objectsRegister.add(\n      flag, \n      object\n    )\n  }\n\n  createEnemy() {\n    if (getRandomTrueFalse(10)) {\n      const bullet = new Enemy({\n        pos: {\n          x: getRndInteger(0, this.element.width),\n          y: -5\n        },\n        size: 5,\n        color: getRandomColorCode,\n        parrent: this,\n        deathPoint: this.element.height + 5\n      });\n\n      this.createObject(\n        OBJECTS_TYPES.ENEMY,\n        bullet\n      )\n    }\n  }\n\n  tick() {\n    const timestamp = new Date().getTime();\n\n    this.drawer.clear();\n\n    if (this.ongoing) {\n      this.createEnemy();\n\n      this.objectsRegister.update(timestamp);\n      this.objectsRegister.draw(this.drawer);\n\n      this.player.tick(timestamp);\n      this.player.draw(this.drawer);\n\n      this.checkPlayerCollissions();\n      this.checkBulletCollisions();\n    } else {\n      this.drawer.fillText(\n        {x: this.element.width / 2, y: this.element.height / 2},\n        'YOU DIED',\n        '#fff',\n        90\n      );\n\n      if (getRandomTrueFalse(10)) {\n\n        const floatDot = new FloatingDot({\n          pos: {\n            x: getRndInteger(0, this.element.width),\n            y: getRndInteger(0, this.element.height)\n          },\n          parrent: this\n        });\n\n        this.createObject(\n          OBJECTS_TYPES.PARTICLE,\n          floatDot\n        )\n      }\n    }\n\n    this.drawer.fillText(\n      {x: this.element.width / 2, y: 40},\n      `SCORE: ${Math.ceil(this.score)}`,\n      '#fff',\n      16\n    );\n\n    requestAnimationFrame(this.tick.bind(this));\n  }\n\n  spamParticles(pos, amount = 5) {\n    for (let i = 0; i < amount; i++) {\n      const particle = new Particle({\n        pos: pos,\n        lifetime: 2000,\n        parrent: this\n      });\n      this.createObject(\n        OBJECTS_TYPES.PARTICLE,\n        particle\n      );\n    }\n  }\n}\n","import {\n  getRndInteger,\n  getRandomColorCode\n} from \"./functions/helpers.js\";\nimport { Owner } from \"./core/owner.js\";\n\nconst cnv = document.querySelector(\"canvas\");\ncnv.height = window.innerHeight;\nwindow.addEventListener(\"resize\", () => {\n  cnv.height = window.innerHeight;\n});\n\n(() => {\n  new Owner(cnv);\n})(window);\n"]}